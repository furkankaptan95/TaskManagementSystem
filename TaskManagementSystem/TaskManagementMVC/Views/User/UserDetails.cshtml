@model UserDetailsDto

@{
    if (TempData["success"] is not null)
    {
        <div class="alert custom-alert-success mt-5">
            @TempData["success"]
        </div>
    }

    if (TempData["error"] is not null)
    {
        <div class="alert custom-alert-error mt-5">
            @TempData["error"]
        </div>
    }
}

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white text-center">
                    <h4>Kullanıcı Detayları</h4>
                </div>
                <div class="card-body">
                    <table class="table table-borderless">
                        <tbody>
                            <tr>
                                <th scope="row" class="text-muted">E-posta:</th>
                                <td>@Model.Email</td>
                            </tr>
                            <tr>
                                <th scope="row" class="text-muted">Kullanıcı Adı:</th>
                                <td>@Model.Username</td>
                            </tr>
                            <tr>
                                <th scope="row" class="text-muted">Ad:</th>
                                <td>@Model.Firstname</td>
                            </tr>
                            <tr>
                                <th scope="row" class="text-muted">Soyad:</th>
                                <td>@Model.Lastname</td>
                            </tr>
                            <tr>
                                <th scope="row" class="text-muted">Rol:</th>
                                <td>
                                    <span id="roleDisplay">@Model.Role</span>
                                    <button id="changeRoleBtn" class="btn btn-info btn-sm ms-3">Değiştir</button>

                                    <form id="changeRoleForm" class="d-none" method="post" asp-controller="User" asp-action="ChangeRole">
                                        <input type="hidden" name="UserId" value="@Model.Id" />
                                        <div class="input-group">
                                            <input type="text" class="form-control form-control-sm" style="color:white;" name="Role" value="@Model.Role" placeholder="Yeni Rol">
                                            <button type="submit" class="btn btn-primary btn-sm ms-3">Kaydet</button>
                                            <button type="button" id="cancelChangeRole" class="btn btn-secondary btn-sm">İptal</button>
                                        </div>
                                    </form>
                                </td>
                            </tr>
                            <tr>
                                <th scope="row" class="text-muted">Oluşturulma Tarihi:</th>
                                <td>@Model.CreatedAt.ToString("dd MMMM yyyy, HH:mm")</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div class="card-footer text-center">
                    <a href="/User/All" class="btn btn-secondary btn-sm">Geri Dön</a>
                    <a href="/edit-user/@Model.Id" class="btn btn-warning btn-sm">Düzenle</a>
                    <a href="@Url.Action("DeleteUser", "User", new { userId = Model.Id })" class="btn btn-danger btn-sm">Sil</a>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .card {
        border-radius: 10px;
        overflow: hidden;
    }

    .card-header {
        font-weight: bold;
        letter-spacing: 0.5px;
    }

    .table th {
        width: 35%;
    }

    .table td {
        font-weight: 500;
    }

    .btn-sm {
        margin-right: 5px;
    }

    .custom-alert-success {
        position: fixed; /* Sayfada sabit konumlandırma */
        top: 25px; /* Ekranın üst kısmından 10px boşluk */
        left: 58%; /* Ekranın ortasına hizalama */
        transform: translateX(-50%); /* Ortalamak için translate */
        z-index: 1000; /* Diğer elementlerin üstünde görünmesini sağlar */
        background-color: wheat; /* Arka plan rengi */
        color: #6b4f3a; /* Yazı rengi (daha koyu bir ton) */
        padding: 10px 20px;
        border-radius: 5px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .custom-alert-error {
        position: fixed; /* Sayfada sabit konumlandırma */
        top: 25px; /* Ekranın üst kısmından 10px boşluk */
        left: 58%; /* Ekranın ortasına hizalama */
        transform: translateX(-50%); /* Ortalamak için translate */
        z-index: 1000; /* Diğer elementlerin üstünde görünmesini sağlar */
        background-color: #f8d7da;
        color: #721c24;
        padding: 10px 20px;
        border-radius: 5px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .is-invalid {
        border: 2px solid red;
        background-color: #ffe6e6;
    }

    .is-valid {
        border: 2px solid green;
        background-color: #e6ffe6;
    }

    .text-danger {
        font-size: 0.9rem;
        font-weight: bold;
    }

</style>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const roleInput = document.querySelector("input[name='Role']");
        const form = document.getElementById("changeRoleForm");
        const changeRoleBtn = document.getElementById("changeRoleBtn");
        const cancelChangeRole = document.getElementById("cancelChangeRole");
        const roleDisplay = document.getElementById("roleDisplay");

        // Role değiştirme formunu açma
        changeRoleBtn.addEventListener("click", function (e) {
            e.preventDefault();
            roleDisplay.classList.add("d-none");
            changeRoleBtn.classList.add("d-none");
            form.classList.remove("d-none");
        });

        // Role değiştirme formunu kapatma
        cancelChangeRole.addEventListener("click", function (e) {
            e.preventDefault();
            roleDisplay.classList.remove("d-none");
            changeRoleBtn.classList.remove("d-none");
            form.classList.add("d-none");
        });

        function validateRole() {
            let errorElement = document.getElementById("roleError");

            if (!errorElement) {
                errorElement = document.createElement("span");
                errorElement.id = "roleError";
                errorElement.classList.add("text-danger");
                roleInput.parentNode.appendChild(errorElement);
            }

            if (roleInput.value.trim().length < 3) {
                errorElement.textContent = "Rol en az 3 karakter olmalıdır.";
                roleInput.classList.add("is-invalid");
                roleInput.classList.remove("is-valid");
            } else {
                errorElement.textContent = "";
                roleInput.classList.add("is-valid");
                roleInput.classList.remove("is-invalid");
            }
        }

        // Kullanıcı input yazarken doğrulama yap
        roleInput.addEventListener("input", validateRole);

        // Form gönderilmeden önce doğrulama yap
        form.addEventListener("submit", function (event) {
            validateRole();
            if (roleInput.classList.contains("is-invalid")) {
                event.preventDefault(); // Hatalıysa formu göndermeyi engelle
            }
        });
    });
</script>

