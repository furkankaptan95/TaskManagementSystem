@model AddUserDto

@{
    ViewData["Title"] = "Yeni Kullanıcı Ekle";
}

@{
    if (ViewData["success"] is not null)
    {
        <div class="alert custom-alert-success mt-5">
            @ViewData["success"]
        </div>
    }

    if (ViewData["error"] is not null)
    {
        <div class="alert custom-alert-error mt-5">
            @ViewData["error"]
        </div>
    }
}

<div class="container mt-5">
    <h2 class="mb-4">Yeni Kullanıcı Ekle</h2>
    <!-- Form -->
    <form asp-controller="User" asp-action="Add" method="post" id="userForm">

        <div class="form-group mb-3">
            <label for="Username">Kullanıcı Adı</label>
            <input type="text" class="form-control" id="Username" name="Username" placeholder="Kullanıcı adı girin" />
            <span class="text-danger" id="usernameError"></span>
        </div>

        <div class="form-group mb-3">
            <label for="Email">Email</label>
            <input type="text" class="form-control" id="Email" name="Email" placeholder="Email girin" />
            <span class="text-danger" id="emailError"></span>
        </div>

        <div class="form-group mb-3">
            <label for="Firstname">İsim</label>
            <input type="text" class="form-control" id="Firstname" name="Firstname" placeholder="İsim girin" />
            <span class="text-danger" id="firstnameError"></span>
        </div>

        <div class="form-group mb-3">
            <label for="Lastname">Soy İsim</label>
            <input type="text" class="form-control" id="Lastname" name="Lastname" placeholder="Soyismi girin" />
            <span class="text-danger" id="lastnameError"></span>
        </div>

        <div class="form-group mb-3">
            <label for="Password">Şifre</label>
            <input type="text" class="form-control" id="Password" name="Password" placeholder="Şifre girin" />
            <span class="text-danger" id="passwordError"></span>
        </div>

        <!-- Gönder Butonu -->
        <button type="submit" class="btn btn-primary">Kullanıcı Ekle</button>
    </form>
</div>

<style>
    body {
        background-color: #121212; /* Sayfa arka planı koyu gri/siyah */
        color: #f1f1f1; /* Ana metin rengi (açık gri) */
        font-family: Arial, sans-serif; /* Modern bir font */
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh; /* Sayfa yüksekliğini tam ekran yapar */
        margin: 0;
    }

    .container {
        background-color: #1e1e1e; /* Form arka planı koyu gri */
        padding: 30px;
        border-radius: 10px;
        box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.5); /* Hafif gölge efekti */
        max-width: 600px;
        width: 100%;
    }

    h2 {
        color: #ffffff; /* Başlık rengi beyaz */
        text-align: center;
        margin-bottom: 20px;
    }

    .form-group label {
        font-weight: bold;
        color: #ffffff; /* Label rengi beyaz */
    }

    .form-control, .form-select {
        background-color: #2b2b2b; /* Input ve dropdown arka planı */
        color: #ffffff; /* Input ve dropdown yazı rengi */
        border: 1px solid #444444; /* Kenarlık rengi */
    }

        .form-control:focus, .form-select:focus {
            border-color: #007bff; /* Focus olduğunda kenarlık rengi */
            box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
        }

    .btn-primary:hover {
        background-color: #0056b3;
        border-color: #0056b3;
    }

    .custom-alert-success {
        position: fixed; /* Sayfada sabit konumlandırma */
        top: 25px; /* Ekranın üst kısmından 10px boşluk */
        left: 58%; /* Ekranın ortasına hizalama */
        transform: translateX(-50%); /* Ortalamak için translate */
        z-index: 1000; /* Diğer elementlerin üstünde görünmesini sağlar */
        background-color: wheat; /* Arka plan rengi */
        color: #6b4f3a; /* Yazı rengi (daha koyu bir ton) */
        padding: 10px 20px;
        border-radius: 5px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .custom-alert-error {
        position: fixed; /* Sayfada sabit konumlandırma */
        top: 25px; /* Ekranın üst kısmından 10px boşluk */
        left: 58%; /* Ekranın ortasına hizalama */
        transform: translateX(-50%); /* Ortalamak için translate */
        z-index: 1000; /* Diğer elementlerin üstünde görünmesini sağlar */
        background-color: #f8d7da;
        color: #721c24;
        padding: 10px 20px;
        border-radius: 5px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }
</style>

<script>
document.addEventListener("DOMContentLoaded", function () {
    const form = document.getElementById("userForm");
    const fields = {
        Username: document.getElementById("Username"),
        Email: document.getElementById("Email"),
        Firstname: document.getElementById("Firstname"),
        Lastname: document.getElementById("Lastname"),
        Password: document.getElementById("Password")
    };
    
    const errors = {
        Username: document.getElementById("usernameError"),
        Email: document.getElementById("emailError"),
        Firstname: document.getElementById("firstnameError"),
        Lastname: document.getElementById("lastnameError"),
        Password: document.getElementById("passwordError")
    };

    function validateField(field, errorElement, validationFunc) {
        const errorMessage = validationFunc(field.value.trim());
        if (errorMessage) {
            errorElement.textContent = errorMessage;
            field.classList.add("is-invalid");
        } else {
            errorElement.textContent = "";
            field.classList.remove("is-invalid");
            field.classList.add("is-valid");
        }
    }

    function validateUsername(value) {
        return value.length < 3 ? "Kullanıcı adı en az 3 karakter olmalıdır." : "";
    }

    function validateEmail(value) {
        const emailPattern = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;
        return !emailPattern.test(value) ? "Geçerli bir e-posta adresi girin." : "";
    }

    function validateName(value) {
        return value.length < 2 ? "Bu alan en az 2 karakter olmalıdır." : "";
    }

    function validatePassword(value) {
        return value.length < 6 ? "Şifre en az 6 karakter olmalıdır." : "";
    }

    fields.Username.addEventListener("input", () => validateField(fields.Username, errors.Username, validateUsername));
    fields.Email.addEventListener("input", () => validateField(fields.Email, errors.Email, validateEmail));
    fields.Firstname.addEventListener("input", () => validateField(fields.Firstname, errors.Firstname, validateName));
    fields.Lastname.addEventListener("input", () => validateField(fields.Lastname, errors.Lastname, validateName));
    fields.Password.addEventListener("input", () => validateField(fields.Password, errors.Password, validatePassword));

    form.addEventListener("submit", function (event) {
        let isValid = true;

        Object.keys(fields).forEach(key => {
            validateField(fields[key], errors[key], key === "Email" ? validateEmail :
                                                      key === "Password" ? validatePassword :
                                                      validateName);
            if (errors[key].textContent) {
                isValid = false;
            }
        });

        if (!isValid) {
            event.preventDefault(); // Form gönderimini engelle
        }
    });
});
</script>
