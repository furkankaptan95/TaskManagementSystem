@model NewPasswordDto
@{
    Layout = null;
}

@{
    if (ViewData["success"] is not null)
    {
        <div class="alert custom-alert-success mt-5">
            @ViewData["success"]
        </div>
    }

    if (TempData["success"] is not null)
    {
        <div class="alert custom-alert-success mt-5">
            @TempData["success"]
        </div>
    }

    if (ViewData["error"] is not null)
    {
        <div class="alert custom-alert-error mt-5">
            @ViewData["error"]
        </div>
    }

    if (TempData["error"] is not null)
    {
        <div class="alert custom-alert-success mt-5">
            @TempData["error"]
        </div>
    }
}

<!DOCTYPE html>
<html lang="tr">
<head>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css">
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" rel="stylesheet">

</head>

<body>
    <div class="form-gap"></div>
    <div class="container">
        <div class="row">
            <div class="col-md-4 col-md-offset-4">
                <div class="panel panel-default">
                    <div class="panel-body">
                        <div class="text-center">
                            <h3><i class="fa fa-lock fa-4x"></i></h3>
                            <h2 class="text-center">Doğrulama başarılı.</h2>
                            <p>Şifrenizi yenileyebilirsiniz.</p>
                            <div class="panel-body">

                                <form asp-controller="Auth" asp-action="RenewPasswordPost" id="register-form" role="form" autocomplete="off" class="form" method="post">

                                    <input type="hidden" asp-for="Email" />

                                    <input type="hidden" asp-for="Token" />

                                    <div class="form-group">
                                        <div class="input-group">
                                            <span class="input-group-addon"><i class="glyphicon glyphicon-envelope color-blue"></i></span>
                                            <input asp-for="Password" placeholder="Şifre" class="form-control" type="password">
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <div class="input-group">
                                            <span class="input-group-addon"><i class="glyphicon glyphicon-envelope color-blue"></i></span>
                                            <input asp-for="ConfirmPassword" placeholder="Şifre tekrar" class="form-control" type="password">
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <button class="btn btn-lg btn-primary btn-block" type="submit">Şifreyi Yenile</button>
                                    </div>

                                </form>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</body>
</html>
<style>
    .custom-alert-success {
        position: fixed; /* Sayfada sabit konumlandırma */
        top: 25px; /* Ekranın üst kısmından 10px boşluk */
        left: 50%; /* Ekranın ortasına hizalama */
        transform: translateX(-50%); /* Ortalamak için translate */
        z-index: 1000; /* Diğer elementlerin üstünde görünmesini sağlar */
        background-color: wheat; /* Arka plan rengi */
        color: #6b4f3a; /* Yazı rengi (daha koyu bir ton) */
        padding: 10px 20px;
        border-radius: 5px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .custom-alert-error {
        position: fixed; /* Sayfada sabit konumlandırma */
        top: 25px; /* Ekranın üst kısmından 10px boşluk */
        left: 50%; /* Ekranın ortasına hizalama */
        transform: translateX(-50%); /* Ortalamak için translate */
        z-index: 1000; /* Diğer elementlerin üstünde görünmesini sağlar */
        background-color: #f8d7da;
        color: #721c24;
        padding: 10px 20px;
        border-radius: 5px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .form-gap {
        padding-top: 70px;
    }

    .is-valid {
        border: 2px solid #28a745 !important;
        background-color: #e9fbe9 !important;
        color: #155724 !important;
        box-shadow: 0 0 5px rgba(40, 167, 69, 0.5);
    }

    /* Hatalı girişler için (kırmızı çerçeve ve arkaplan) */
    .is-invalid {
        border: 2px solid #dc3545 !important;
        background-color: #fde8e8 !important;
        color: #721c24 !important;
        box-shadow: 0 0 5px rgba(220, 53, 69, 0.5);
    }

    /* Hata mesajlarını belirgin yap */
    .text-danger {
        font-size: 0.9rem;
        font-weight: bold;
        color: #dc3545 !important;
        margin-top: 5px;
    }

    /* Inputlara yumuşak geçiş efekti */
    input {
        transition: all 0.3s ease-in-out;
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const passwordInput = document.querySelector("input[name='Password']");
        const confirmPasswordInput = document.querySelector("input[name='ConfirmPassword']");

        const passwordError = document.createElement("span");
        const confirmPasswordError = document.createElement("span");

        passwordError.classList.add("text-danger");
        confirmPasswordError.classList.add("text-danger");

        passwordInput.parentNode.appendChild(passwordError);
        confirmPasswordInput.parentNode.appendChild(confirmPasswordError);

        function validatePassword() {
            const value = passwordInput.value.trim();
            if (value.length < 6) {
                passwordError.textContent = "Şifre en az 6 karakter olmalıdır.";
                passwordInput.classList.add("is-invalid");
                passwordInput.classList.remove("is-valid");
            } else {
                passwordError.textContent = "";
                passwordInput.classList.add("is-valid");
                passwordInput.classList.remove("is-invalid");
            }
            validateConfirmPassword(); // Şifre değiştiğinde confirm alanını da kontrol et
        }

        function validateConfirmPassword() {
            if (confirmPasswordInput.value !== passwordInput.value) {
                confirmPasswordError.textContent = "Şifreler eşleşmiyor.";
                confirmPasswordInput.classList.add("is-invalid");
                confirmPasswordInput.classList.remove("is-valid");
            } else {
                confirmPasswordError.textContent = "";
                confirmPasswordInput.classList.add("is-valid");
                confirmPasswordInput.classList.remove("is-invalid");
            }
        }

        passwordInput.addEventListener("input", validatePassword);
        confirmPasswordInput.addEventListener("input", validateConfirmPassword);

        // Success ve Error alert'lerini belirli süre sonra kaybetme
        var alerts = document.querySelectorAll('.custom-alert-success, .custom-alert-error');

        alerts.forEach(function (alert) {
            if (alert) {
                setTimeout(function () {
                    alert.style.transition = 'opacity 0.5s ease';
                    alert.style.opacity = '0';
                    setTimeout(function () {
                        alert.remove();
                    }, 500);
                }, 5000);
            }
        });
    });
</script>
