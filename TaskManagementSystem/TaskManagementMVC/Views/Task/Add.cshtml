@model AddTaskDto

@{
    ViewData["Title"] = "Yeni Görev Ekle";
}

@{
    if (ViewData["success"] is not null)
    {
        <div class="alert custom-alert-success mt-5">
            @ViewData["success"]
        </div>
    }

    if (ViewData["error"] is not null)
    {
        <div class="alert custom-alert-error mt-5">
            @ViewData["error"]
        </div>
    }
}

<div class="container mt-5">
    <h2 class="mb-4">Yeni Görev Ekle</h2>
    <!-- Form -->
    <form asp-controller="Task" asp-action="Add" method="post" id="taskForm">
        <!-- Task Başlığı -->
        <div class="form-group mb-3">
            <label for="Title">Başlık</label>
            <input type="text" class="form-control" id="Title" name="Title" placeholder="Görev başlığı girin" />
            <span class="text-danger" id="titleError"></span>
        </div>

        <!-- Task Açıklaması -->
        <div class="form-group mb-3">
            <label for="Description">Açıklama</label>
            <textarea class="form-control" id="Description" name="Description" rows="4" placeholder="Görev açıklamasını girin"></textarea>
            <span class="text-danger" id="descriptionError"></span>
        </div>

        <!-- Kullanıcı Seçimi -->
        <div class="form-group mb-3">
            <label for="UserId">Kullanıcı (Opsiyonel)</label>
            <select class="form-select" id="UserId" name="UserId">
                <option value="">Daha sonra seç</option>
                @foreach (var user in ViewBag.UserSelectList as SelectList)
                {
                    <option value="@user.Value">@user.Text</option>
                }
            </select>
        </div>

        <!-- Bitiş Tarihi -->
        <div class="form-group mb-3">
            <label for="EndDate">Bitiş Tarihi</label>
            <input type="date" class="form-control" id="EndDate" name="EndDate" />
            <span class="text-danger" id="endDateError"></span>
        </div>

        <!-- Gönder Butonu -->
        <button type="submit" class="btn btn-primary">Görev Ekle</button>
    </form>
</div>

<style>
    body {
        background-color: #121212; /* Sayfa arka planı koyu gri/siyah */
        color: #f1f1f1; /* Ana metin rengi (açık gri) */
        font-family: Arial, sans-serif; /* Modern bir font */
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh; /* Sayfa yüksekliğini tam ekran yapar */
        margin: 0;
    }

    .container {
        background-color: #1e1e1e; /* Form arka planı koyu gri */
        padding: 30px;
        border-radius: 10px;
        box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.5); /* Hafif gölge efekti */
        max-width: 600px;
        width: 100%;
    }

    h2 {
        color: #ffffff; /* Başlık rengi beyaz */
        text-align: center;
        margin-bottom: 20px;
    }

    .form-group label {
        font-weight: bold;
        color: #ffffff; /* Label rengi beyaz */
    }

    .form-control, .form-select {
        background-color: #2b2b2b; /* Input ve dropdown arka planı */
        color: #ffffff; /* Input ve dropdown yazı rengi */
        border: 1px solid #444444; /* Kenarlık rengi */
    }

        .form-control:focus, .form-select:focus {
            border-color: #007bff; /* Focus olduğunda kenarlık rengi */
            box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
        }

        .btn-primary:hover {
            background-color: #0056b3;
            border-color: #0056b3;
        }

    .custom-alert-success {
        position: fixed; /* Sayfada sabit konumlandırma */
        top: 25px; /* Ekranın üst kısmından 10px boşluk */
        left: 58%; /* Ekranın ortasına hizalama */
        transform: translateX(-50%); /* Ortalamak için translate */
        z-index: 1000; /* Diğer elementlerin üstünde görünmesini sağlar */
        background-color: wheat; /* Arka plan rengi */
        color: #6b4f3a; /* Yazı rengi (daha koyu bir ton) */
        padding: 10px 20px;
        border-radius: 5px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .custom-alert-error {
        position: fixed; /* Sayfada sabit konumlandırma */
        top: 25px; /* Ekranın üst kısmından 10px boşluk */
        left: 58%; /* Ekranın ortasına hizalama */
        transform: translateX(-50%); /* Ortalamak için translate */
        z-index: 1000; /* Diğer elementlerin üstünde görünmesini sağlar */
        background-color: #f8d7da;
        color: #721c24;
        padding: 10px 20px;
        border-radius: 5px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .is-valid {
        border: 2px solid #28a745 !important;
        background-color: #e9fbe9 !important;
        color: #155724 !important;
        box-shadow: 0 0 5px rgba(40, 167, 69, 0.5);
    }

    /* Hatalı girişler için (kırmızı çerçeve ve ikon) */
    .is-invalid {
        border: 2px solid #dc3545 !important;
        background-color: #fde8e8 !important;
        color: #721c24 !important;
        box-shadow: 0 0 5px rgba(220, 53, 69, 0.5);
    }

    /* Hata mesajlarını daha belirgin yap */
    .text-danger {
        font-size: 0.9rem;
        font-weight: bold;
        color: #dc3545 !important;
        margin-top: 5px;
    }

    /* Inputlara geçiş efekti */
    input, textarea, select {
        transition: all 0.3s ease-in-out;
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const titleInput = document.getElementById("Title");
        const descriptionInput = document.getElementById("Description");
        const endDateInput = document.getElementById("EndDate");
        const form = document.getElementById("taskForm");

        function validateTitle() {
            const errorElement = document.getElementById("titleError");
            const title = titleInput.value.trim();

            if (title.length === 0) {
                errorElement.textContent = "Başlık zorunludur.";
                titleInput.classList.add("is-invalid");
            } else if (title.length > 50) {
                errorElement.textContent = "Başlık en fazla 50 karakter olmalıdır.";
                titleInput.classList.add("is-invalid");
            } else {
                errorElement.textContent = "";
                titleInput.classList.remove("is-invalid");
                titleInput.classList.add("is-valid");
            }
        }

        function validateDescription() {
            const errorElement = document.getElementById("descriptionError");
            const description = descriptionInput.value.trim();

            if (description.length === 0) {
                errorElement.textContent = "Açıklama zorunludur.";
                descriptionInput.classList.add("is-invalid");
            } else if (description.length > 500) {
                errorElement.textContent = "Açıklama en fazla 500 karakter olmalıdır.";
                descriptionInput.classList.add("is-invalid");
            } else {
                errorElement.textContent = "";
                descriptionInput.classList.remove("is-invalid");
                descriptionInput.classList.add("is-valid");
            }
        }

        function validateEndDate() {
            const errorElement = document.getElementById("endDateError");
            const endDateValue = endDateInput.value;

            if (!endDateValue) {
                errorElement.textContent = "Bitiş tarihi gereklidir.";
                endDateInput.classList.add("is-invalid");
                return;
            }

            const selectedDate = new Date(endDateValue);
            const today = new Date();
            today.setHours(0, 0, 0, 0); // Gün başlangıcına sıfırla

            if (selectedDate <= today) {
                errorElement.textContent = "Bitiş tarihi bugünden ileri bir tarih olmalıdır.";
                endDateInput.classList.add("is-invalid");
            } else {
                errorElement.textContent = "";
                endDateInput.classList.remove("is-invalid");
                endDateInput.classList.add("is-valid");
            }
        }

        // Input değiştikçe doğrulama yap
        titleInput.addEventListener("input", validateTitle);
        descriptionInput.addEventListener("input", validateDescription);
        endDateInput.addEventListener("change", validateEndDate);

        // Form gönderilmeden önce doğrulama yap
        form.addEventListener("submit", function (event) {
            validateTitle();
            validateDescription();
            validateEndDate();

            if (
                titleInput.classList.contains("is-invalid") ||
                descriptionInput.classList.contains("is-invalid") ||
                endDateInput.classList.contains("is-invalid")
            ) {
                event.preventDefault(); // Formu göndermeyi engelle
            }
        });
    });
</script>
